---
title: "Challenge 2: Data Acquisition"
author: "Mohamed, Islam"
matriculation number: "21650912"
---
# Challenge: 
## Get some data via an API.
For this part of the challenge, I am using a Translator API from the translator engine Deepl. The user can type a text and in our case it will be translated to any supported language. In the following example, the target language is german. 

You can change the parameter "target_lang" in the function translate2 to change the target language to another one. Also, in the parameter "text" you can change the written text below to tranlate a different text. 

*Code below*
```{r}
install.packages("devtools")
devtools::install_github("zumbov2/deeplr")

my_auth_key = "05bc2a53-360f-1d6a-540f-2b880ad44d62:fx"
text_to_be_translated = "La seule facon de savoir ce qui se passe est de perturber le systeme."

translated_text <- deeplr::translate2(
  text = text_to_be_translated,
  target_lang = "EN",
  auth_key = my_auth_key
)
print(translated_text)

knitr::kable(text_to_be_translated, caption = 'text to be translated')
knitr::kable(translated_text, caption = 'translated text')
```

# Challenge: 
## Scrape one of the competitor websites of canyon

```{r}

library(RSQLite)
library(tidyverse)
library(httr)
library(glue)
library(jsonlite)
library(rvest)
library(stringi)
library(xopen)
library(dplyr)
base_url <- 'https://www.rosebikes.com/bikes'
# 1. Function to get bike family URLs.
get_bike_family_urls <- function(base_url) {
  
  bike_family_urls <- read_html(base_url) %>%
    html_nodes(css = ".catalog-categories-item > a") %>%
    html_attr('href') %>%
    
    # Convert vector to tibble
    
    enframe(name = "position", value = "subdirectory") %>%
    # Add the domain because we will get only the subdirectories
    mutate(
      url = glue('https://www.rosebikes.com{subdirectory}')
    ) 
  

  
}
# 2. Function to get bike family URLs.
get_model_urls <- function(url) {
  
  bike_type_url <- read_html(url) %>%
    html_nodes(css = ".catalog-category-bikes__content > a") %>%
    html_attr('href') %>%
    enframe(name = "position", value = "url") %>%
    mutate(url = glue('https://www.rosebikes.com{url}')) 
}
# 3. Function to get the names of each bike 
get_bike_names <- function(url) {
  
  bike_model_name_tbl <- read_html(url) %>%
    html_nodes(css = ".catalog-category-model__title") %>%
    html_text() %>%
    # Convert vector to tibble
    as_tibble()
  
  
}
# 4. Function to get the prices of each bike 
get_bike_prices <- function(url) {
  
  bike_model_price_tbl <- read_html(url) %>%
    html_nodes(css = ".product-tile-price__current-value") %>%
    html_text() %>%
    # Convert vector to tibble
    as_tibble()
  
}
#### APPLYING ABOVE FUNCTIONS
bike_family_url_tbl <- get_bike_family_urls(base_url)
bike_family_url_tbl <- bike_family_url_tbl %>%
  slice(2:5) # Pick 3 categories
# Create a table with bike model URLS
bike_model_url_tbl <- tibble()
for (i in seq_along(bike_family_url_tbl$url)) {
  
  web <- toString(bike_family_url_tbl$url[i])
  bike_model_url_tbl <- bind_rows(bike_model_url_tbl, get_model_urls(web))
  
}
# Create a table with bike model names
bike_model_names_tbl <- tibble()
for (i in seq_along(bike_model_url_tbl$url)) {
  
  web <- toString(bike_model_url_tbl$url[i])
  bike_model_names_tbl <- bind_rows(bike_model_names_tbl, get_bike_names(web))
  
}
# Rename cols
names(bike_model_names_tbl)[1] <- "Bike Model"
# Create a table with bike prices
bike_model_prices_tbl <- tibble()
for (i in seq_along(bike_model_url_tbl$url)) {
  web <- toString(bike_model_url_tbl$url[i])
  bike_model_prices_tbl <- bind_rows(bike_model_prices_tbl, get_bike_prices(web))
}
# Rename columns
names(bike_model_prices_tbl)[1] <- "Bike Price"
# Visualize scraped data into a table 
table_of_prices <- bind_cols(bike_model_names_tbl,bike_model_prices_tbl)
knitr::kable(table_of_prices[1:10, ], caption = 'Rosebike.com bicycle model "Road" including prices')
```

